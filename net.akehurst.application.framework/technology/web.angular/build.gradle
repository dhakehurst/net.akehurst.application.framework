plugins {
  id "com.moowork.node" version "1.2.0"
}

configurations {
	nodeDep {
		extendsFrom implementation
		transitive true
	}
	nodeDev
}

dependencies {
	
	nodeDev 'org.webjars.npm:typescript:2.5.3'
	
	nodeDep 'org.webjars.npm:monaco-editor:0.13.1'
	nodeDep "org.webjars.npm:rxjs:6.2.1"
	nodeDep "org.webjars.npm:angular__common:6.0.7"
	nodeDep "org.webjars.npm:angular__core:6.0.7"
	
	//don't really want to repeat these! but need them to they are added as dependencies
	// nodeDep exendsFrom implementation doesn't seem to work
	implementation 'org.webjars.npm:monaco-editor:0.13.1'
	
}

ext {
	tsBuild = "${project.buildDir}/nodeBuild"
}

node {
	version = '10.6.0'
	distBaseUrl = 'https://nodejs.org/dist'
	download = true
	workDir = file("${project.buildDir}/node")
	nodeModulesDir = file("${tsBuild}/node_modules")
}


sourceSets {
	main {
		java {
			srcDir "${projectDir}/src/main/typescript"
		}
	}
}

jar {
	into("META-INF/resources/webjars/net.akehurst.language.editor/${project.version}") {
	   from "${tsBuild}/dist"
	   include '**/*.*'
	}
   
}

task extractWebjars(type: Sync) {
	dependsOn configurations.nodeDep

	configurations.nodeDep.resolvedConfiguration.resolvedArtifacts.each{ dep ->
		//println it.moduleVersion
		from zipTree(dep.file)
		into "${tsBuild}/node_modules"
		include 'META-INF/resources/webjars/**'
		eachFile { f ->
			if (f.path.contains('__')) {
				f.path = '@'+f.path.replaceFirst('META-INF/resources/webjars/', '').replaceFirst('__','/')
			} else {
				f.path = f.path.replaceFirst('META-INF/resources/webjars/', '')
			}
			f.path = f.path.replaceFirst(dep.moduleVersion.id.version,'')
		}
		includeEmptyDirs false
	}
	
	configurations.nodeDev.resolvedConfiguration.resolvedArtifacts.each{ dep ->
		//println it.moduleVersion
		from zipTree(dep.file)
		into "${tsBuild}/node_modules"
		include 'META-INF/resources/webjars/**'
		eachFile { f ->
			if (f.path.contains('__')) {
				f.path = '@'+f.path.replaceFirst('META-INF/resources/webjars/', '').replaceFirst('__','/')
			} else {
				f.path = f.path.replaceFirst('META-INF/resources/webjars/', '')
			}
			f.path = f.path.replaceFirst(dep.moduleVersion.id.version,'')
		}
		includeEmptyDirs false
	}
}

task copySource(type: Sync) {
	from "${projectDir}/src/main/typescript"
	into "${tsBuild}"
}

task tsc(type: NodeTask) {
	dependsOn 'extractWebjars'
	dependsOn 'copySource'
	workingDir = file("${tsBuild}")
	script = file("${tsBuild}/node_modules/typescript/lib/tsc.js")
	if (project.hasProperty('tscArgs')) {
		args = project.findProperty('tscArgs').tokenize()
	}
}

task copyResources(type: Copy) {
	dependsOn 'tsc'
	from "${projectDir}/src/main/typescript"
	into "${tsBuild}/dist"
	exclude "**/*.ts"
}

processResources.dependsOn 'copyResources'